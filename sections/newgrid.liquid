{% schema %}
{
  "name": "Product Grid",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Grid",
      "category": "Custom"
    }
  ]
}
{% endschema %}
<section class="product-grid-wrapper">
  <h2 class="section-heading">Tisso vison in the wild</h2>
  <div class="product-grid">
    {% for block in section.blocks %}
      {% assign product = all_products[block.settings.product] %}
      {% if product %}
        <div class="product-card" data-handle="{{ product.handle }}">
          <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
          <div class="overlay-icon">+</div>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</section>

<!-- POPUP for product details -->
<div id="product-popup" class="popup">
  <div class="popup-content">
    <span class="close-popup">&times;</span>
    <div class="popup-header">
      <div class="popup-image-container">
        <img id="popup-image" src="" alt="" />
      </div>
      <div class="popup-details">
        <h2 id="popup-title" class="popup-title"></h2>
        <p id="popup-price" class="popup-price"></p>
        <div id="popup-description" class="popup-description"></div>
      </div>
    </div>
    <div class="popup-section">
      <label class="popup-label">Color</label>
      <div id="popup-colors" class="color-options"></div>
    </div>
    <div class="popup-section">
      <label class="popup-label">Size</label>
      <select id="popup-size" class="popup-size-select">
        <option value="">Choose your size</option>
      </select>
    </div>
    <div class="quantity-selector">
      <button id="decrease-qty" class="qty-btn">−</button>
      <span id="qty" class="qty-display">1</span>
      <button id="increase-qty" class="qty-btn">+</button>
    </div>
    <button id="add-to-cart" class="add-to-cart-btn">ADD TO CART →</button>
  </div>
</div>

<style>
  .product-grid-wrapper {
  max-width: 1200px;
  margin: 0 auto 40px;
}
.section-heading {
  font-size: 24px;
  font-weight: 700;
  margin-bottom: 20px;
  text-align: left;
}
  .popup {
  display: none;
  position: fixed;
  top: 0; 
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5);
  justify-content: center; 
  align-items: center;
  z-index: 9999;
}
.popup-content {
  position: relative;
  width: 90%;
  max-width: 400px;
  background: #fff;
  padding: 20px;
  border-radius: 0;
  box-shadow: 0 4px 10px rgba(0,0,0,0.15);
  font-family: Arial, sans-serif;
}
.close-popup {
  position: absolute;
  top: 12px;
  right: 12px;
  font-size: 24px;
  cursor: pointer;
}
.popup-header {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
  align-items: flex-start;
}
.popup-image-container {
  width: 200px;
  flex-shrink: 0;
}
#popup-image {
  width: 100%;
  height: auto;
  object-fit: cover;
}
.popup-details {
  flex: 1;
}
.popup-title {
  margin: 0 0 5px;
  font-size: 20px;
  font-weight: bold;
}
.popup-price {
  margin: 0 0 10px;
  font-size: 18px;
  font-weight: 700;
}
.popup-description {
  margin: 0 0 15px;
  font-size: 14px;
  line-height: 1.4;
}
.popup-section {
  margin-bottom: 15px;
}
.popup-label {
  display: block;
  margin-bottom: 5px;
  font-weight: 600;
  font-size: 14px;
}
.color-options {
  display: flex;
  border: 1px solid #000;
}
.color-option {
  flex: 1;
  text-align: center;
  padding: 10px 0;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  user-select: none;
  border-right: 1px solid #000;
}
.color-option:last-child {
  border-right: none;
}
.color-option.active {
  background: #000;
  color: #fff;
}
.popup-size-select {
  width: 100%;
  padding: 10px;
  border: 1px solid #000;
  background: #fff;
  font-size: 14px;
  outline: none;
  appearance: none;
}
.quantity-selector {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
  justify-content: center;
}
.qty-btn {
  border: 1px solid #000;
  background: #fff;
  color: #000;
  font-size: 18px;
  width: 40px; 
  height: 40px;
  cursor: pointer;
}
.qty-display {
  display: inline-block;
  width: 50px;
  text-align: center;
  border-top: 1px solid #000;
  border-bottom: 1px solid #000;
  font-size: 16px;
  line-height: 38px;
  margin: 0 5px;
}
.add-to-cart-btn {
  width: 100%;
  padding: 15px;
  background: #000;
  color: #fff;
  border: none;
  font-size: 14px;
  font-weight: 700;
  text-transform: uppercase;
  cursor: pointer;
  letter-spacing: 0.5px;
}
.add-to-cart-btn:hover {
  background: #333;
}
  .product-grid {
    display: grid; 
    grid-template-columns: repeat(3, 1fr);
    gap: 20px; padding: 20px; max-width: 1200px; margin: 0 auto;
  }
  .product-card {
    position: relative; border-radius: 8px; overflow: hidden;
  }
  .product-card img {
    width: 100%; height: 300px; object-fit: cover;
  }
  .overlay-icon {
    position: absolute; top: 10px; right: 10px;
    background: #fff; width: 30px; height: 30px;
    border-radius: 50%; display: flex; align-items: center; 
    justify-content: center; font-weight: bold; cursor: pointer;
  }
  @media (max-width: 768px) {
  .product-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;
    padding: 15px;
  }
  .product-card img {
    height: 250px; 
    }
    .section-heading {
    text-align: center;
}
}

</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  let currentProduct = null;
  let selectedVariantId = null;

  /*********************************************************
   1) FETCH THE SWJ PRODUCT BY HANDLE (dark-winter-jacket)
      so we have its first variant ID ready if needed.
  **********************************************************/
  const SWJ_HANDLE = 'dark-winter-jacket';  // <--- Your SWJ product handle
  let swjVariantId = null;

  // We fetch the SWJ product as soon as the page loads:
  fetch(`/products/${SWJ_HANDLE}.js`)
    .then(response => {
      if (!response.ok) throw new Error(`SWJ product not found (handle: ${SWJ_HANDLE})`);
      return response.json();
    })
    .then(swjData => {
      if (swjData.variants && swjData.variants.length > 0) {
        swjVariantId = swjData.variants[0].id;
        console.log('SWJ product loaded. First variant ID =', swjVariantId);
      } else {
        console.warn('SWJ product has no variants.');
      }
    })
    .catch(err => {
      console.error('Error fetching SWJ product:', err);
    });

  /*********************************************************
   2) OPEN POPUP WHEN ANY GRID PRODUCT IS CLICKED
  **********************************************************/
  document.querySelectorAll('.product-card').forEach(card => {
    card.addEventListener('click', async () => {
      const handle = card.dataset.handle;
      console.log(`Clicked product card handle: ${handle}`);

      try {
        // Fetch that product's JSON
        const response = await fetch(`/products/${handle}.js`);
        currentProduct = await response.json();

        console.log('Fetched product JSON:', currentProduct);

        // Set fallback image if none
        let imgUrl = '//via.placeholder.com/400x500';
        if (currentProduct.featured_image) {
          imgUrl = currentProduct.featured_image + '?width=400';
        } else if (currentProduct.images && currentProduct.images.length > 0) {
          imgUrl = currentProduct.images[0] + '?width=400';
        }

        // Populate the popup
        document.getElementById('popup-image').src = imgUrl;
        document.getElementById('popup-title').textContent = currentProduct.title;
        document.getElementById('popup-price').textContent = `€${(currentProduct.price / 100).toFixed(2)}`;
        document.getElementById('popup-description').innerHTML = currentProduct.description;

        // Build color/size options
        const colorOption = currentProduct.options.find(opt => opt.name.toLowerCase() === 'color');
        const sizeOption = currentProduct.options.find(opt => opt.name.toLowerCase() === 'size');

        const colorContainer = document.getElementById('popup-colors');
        colorContainer.innerHTML = '';

        if (colorOption) {
          colorOption.values.forEach(value => {
            const colorDiv = document.createElement('div');
            colorDiv.classList.add('color-option');
            colorDiv.textContent = value;
            colorDiv.dataset.value = value;
            colorContainer.appendChild(colorDiv);
          });
        }

        const sizeSelect = document.getElementById('popup-size');
        sizeSelect.innerHTML = '<option value="">Choose size</option>';
        if (sizeOption) {
          sizeOption.values.forEach(value => {
            const opt = document.createElement('option');
            opt.value = value;
            opt.textContent = value;
            sizeSelect.appendChild(opt);
          });
        }

        // Default color selection
        const firstColorOption = colorContainer.querySelector('.color-option');
        if (firstColorOption) firstColorOption.classList.add('active');

        // Reset quantity
        document.getElementById('qty').textContent = '1';

        // Pick initial variant
        updateVariant();

        // Show popup
        document.getElementById('product-popup').style.display = 'flex';

        // Color click -> update variant
        document.querySelectorAll('.color-option').forEach(option => {
          option.addEventListener('click', () => {
            document.querySelectorAll('.color-option').forEach(o => o.classList.remove('active'));
            option.classList.add('active');
            updateVariant();
          });
        });

        // Size change -> update variant
        sizeSelect.addEventListener('change', updateVariant);

      } catch (error) {
        console.error('Error fetching product:', error);
        alert('Error loading product data.');
      }
    });
  });

  /*********************************************************
   3) FIND THE CORRECT VARIANT BASED ON COLOR + SIZE
  **********************************************************/
  function updateVariant() {
    if (!currentProduct) return;
    const selectedColor = document.querySelector('.color-option.active')?.dataset.value?.toLowerCase().trim();
    const selectedSize = document.getElementById('popup-size').value?.toLowerCase().trim();

    console.log('Looking for variant with color:', selectedColor, 'size:', selectedSize);

    const variant = currentProduct.variants.find(v => {
      const colorMatch = selectedColor ? v.options.some(opt => opt.toLowerCase().trim() === selectedColor) : true;
      const sizeMatch = selectedSize ? v.options.some(opt => opt.toLowerCase().trim() === selectedSize) : true;
      return colorMatch && sizeMatch;
    });

    if (variant) {
      selectedVariantId = variant.id;
      console.log('Found matching variant:', variant.id);
    } else {
      selectedVariantId = null;
      console.warn('No variant found for selected options.');
    }
  }

  /*********************************************************
   4) ADD SELECTED VARIANT (AND SWJ PRODUCT IF BLACK+M)
  **********************************************************/
  document.getElementById('add-to-cart').addEventListener('click', async () => {
    if (!selectedVariantId) {
      alert('Please select options first.');
      return;
    }

    const quantity = parseInt(document.getElementById('qty').textContent, 10) || 1;
    const items = [{ id: selectedVariantId, quantity }];

    // Check condition for black + m
    const selectedColor = document.querySelector('.color-option.active')?.dataset.value?.toLowerCase().trim();
    const selectedSize = document.getElementById('popup-size').value?.toLowerCase().trim();

    console.log('User final color:', selectedColor, 'size:', selectedSize);

    if (selectedColor === 'black' && selectedSize === 'm') {
      // Add the SWJ product if we have its variant ID
      if (swjVariantId) {
        console.log('Condition met => adding SWJ variant:', swjVariantId);
        items.push({
          id: swjVariantId,
          quantity: 1
        });
      } else {
        console.warn('swjVariantId is null, so no SWJ item can be added.');
      }
    } else {
      console.log('Not black + m, so no SWJ item added.');
    }

    console.log('Final items to cart:', items);

    try {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ items })
      });
      const data = await response.json();
      console.log('Response from /cart/add.js:', data);

      if (data.items) {
        window.location.href = '/cart';
      } else if (data.status && data.message) {
        alert(`Error: ${data.message}`);
      } else {
        alert('Unknown error adding to cart.');
      }
    } catch (error) {
      console.error('Failed to add items to cart:', error);
      alert('Failed to add items to cart.');
    }
  });

  /*********************************************************
   5) QUANTITY CONTROLS
  **********************************************************/
  document.getElementById('decrease-qty').addEventListener('click', () => {
    let qty = parseInt(document.getElementById('qty').textContent, 10) || 1;
    if (qty > 1) {
      document.getElementById('qty').textContent = (qty - 1).toString();
    }
  });
  document.getElementById('increase-qty').addEventListener('click', () => {
    let qty = parseInt(document.getElementById('qty').textContent, 10) || 1;
    document.getElementById('qty').textContent = (qty + 1).toString();
  });

  // Close popup
  document.querySelector('.close-popup').addEventListener('click', () => {
    document.getElementById('product-popup').style.display = 'none';
  });
  window.addEventListener('click', (e) => {
    if (e.target.id === 'product-popup') {
      document.getElementById('product-popup').style.display = 'none';
    }
  });
});
</script>
